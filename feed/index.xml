<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Yuguo's Blog</title>
		<link>http://yuguo.us</link>
		<atom:link href="http://yuguo.usfeed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>26岁生日快乐</title>
				<description>&lt;p&gt;&lt;strong&gt;其他人看你做一件事情，跟你自己去做这件事，感悟其实是很不同的。&lt;/strong&gt;有两件事情，在受众看来就是很简单的，但是对于我尝试去实践的时候，觉得非常困难高深，心怀敬意。&lt;/p&gt;

&lt;p&gt;这两件事情分别是管理和写作。&lt;/p&gt;

&lt;p&gt;谈谈写作。在很多场景下我们都需要写作，在大公司中，我们要写短小的RTX，长一点的邮件，更长一点的分享文章，在外面我会写博客和&lt;a href=&quot;http://read.douban.com/column/226077/&quot;&gt;专栏&lt;/a&gt;。关于写作，我觉得最有趣的一个事实是，优秀的写作者跟平庸的写作者所能达到的效果相差百倍以上，比优秀程序员和平庸程序员之间的差别还大。&lt;/p&gt;

&lt;p&gt;优秀的写作者的RTX就是能让对方明白他的目的，并且像施了魔咒一样去合作。优秀的写作者的邮件能让接受者感兴趣，清晰地知道信息。优秀的写作者写的博客能用一段话击中读者心理，情不自禁点右上角的“分享到朋友圈”……这种效果100个平庸的写作者都达不到。&lt;/p&gt;

&lt;p&gt;写作者需要的只是除了文笔，还有逻辑思维、数据分析、麦肯锡金字塔理论、心理学等等几乎所有的知识，而且每一点知识上的卖弄都恰到好处。&lt;/p&gt;

&lt;p&gt;还有管理。今天一位技术总监给我们培训管理课程。他是一个七年工作经验的技术总监，前后台技术都非常专精。但是他给我们说的第一句话是“管理是非常难的一件事情，我始终对这门科学心怀敬畏”。&lt;/p&gt;

&lt;p&gt;最近在看一些管理的书，各种方法论和技术流派，不是看一两遍就是能掌握的，必须亲身去做。所以那些有很多精力和方法去做这些事的人，我都非常佩服。&lt;/p&gt;

&lt;p&gt;其实所有的事情都是这样吧，&lt;strong&gt;纸上学来终觉浅，绝知此事要躬行&lt;/strong&gt;，我只是恰好在践行这两件事而已。在写作这件事上，我能做的就是反复阅读写出来的文字，毫不吝啬地删除无用的信息。在学习管理这件事上，我能做的就是多阅读，多思考，多观察，并克服自己性格上的惰性。&lt;/p&gt;

&lt;p&gt;这些很困难的事情，在有些人看来也许是觉得非常简单，甚至到了一定年龄就理所当然有能力去完成，我却觉得必须跟自己死磕才能做的好。&lt;/p&gt;

&lt;p&gt;而有一些我觉得很简单的事情，在有些人看来却觉得似乎很了不起。比如今天生日很多人就会跟我说“才26岁，很年轻，取得的成绩很不错”。谢谢大家的祝福，我觉得已经做出的事情没有什么了不起的，运气有很大的成分。其实就在我身边带的新人也有很多有这样的潜力，所以我都会有鞭策自己的压力。&lt;/p&gt;

&lt;p&gt;我现在还是一个很差的写作者和管理者，希望下一年能有所改善。&lt;/p&gt;
</description>
				<pubDate>Fri, 21 Mar 2014 21:35:00 +0800</pubDate>
				<link>http://yuguo.us/weblog/26-years-birthday/</link>
				<guid isPermaLink="true">http://yuguo.us/weblog/26-years-birthday/</guid>
			</item>
		
			<item>
				<title>纸牌屋里的专业主义者</title>
				<description>&lt;p&gt;前段时间看完了美版《纸牌屋》一二两季，剧情非常精彩，情节转折也非常快，虽然到后面有点主角光环的感觉了，各种逆天，但整体上是非常好的美剧，五星好评！&lt;/p&gt;

&lt;p&gt;除了主角夫妇惊天地泣鬼神的爱情，我印象很深的是几个非常职业的配角，他们给我做事非常“专业”的感觉。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/2014/03/house-of-cards-1.jpg&quot; alt=&quot;Doug&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Doug，是Frank的头马，几乎万能地处理Frank的一切事情，在跟Frank的对手交涉的时候也很有魄力。曾经酗酒，后来戒了。&lt;/p&gt;

&lt;p&gt;他之所以给我专业的感觉，是因为他能把绝大部分问题都控制在自己下面，而不用上升到boss那里。比如Rachel，还有很多事情，他都能保证不让Frank烦心。&lt;/p&gt;

&lt;p&gt;只有当他真正需要帮助的时候，他会很直接地请求Frank的帮助，比如Tom Hammerschmidt要介入调查，Doug就马上告诉了Frank，我没法控制Tom。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/2014/03/house-of-cards-2.jpg&quot; alt=&quot;Remy Danton&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Remy Danton，他的职业是lobbyist（政治说客），大公司财团的传声筒。他的任务一方面是把大公司的政治诉求传达到华盛顿，进而影响法案和决策，另一方面啥都干。&lt;/p&gt;

&lt;p&gt;他的老板Raymond Tusk有一次让他做一件事的时候，他说，我只是一个说客。Tusk说，我不需要说客。&lt;/p&gt;

&lt;p&gt;大概就能说明说客这个职业对于老板的意义，无论你用什么手段，使用什么名头，最终解决问题就对了。不过这个角色对事业不够坚定，有点摇摆，造成了他最后的失败。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/2014/03/house-of-cards-3.jpg&quot; alt=&quot;Edward Meechum&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Edward Meechum小帅哥，Frank的贴身保镖，随着Frank的升职 ，他也步步高升。&lt;/p&gt;

&lt;p&gt;曾经的他也不怎么懂事，Frank要一个人去人群比较多的地方的时候，他说，“由于安全条例规定，我不能允许你一个人过去”。Frank把他凶了一顿：“在我面前，你只能说两个词，yes和sir”。&lt;/p&gt;

&lt;p&gt;后来他差点被炒掉，Frank挽回他之后，他非常感激，并且随后展现了自己的价值：自己有个侦探朋友，可以找到任何人。而且他的忠心也是剧中仅次于Doug的了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/2014/03/house-of-cards-4.jpg&quot; alt=&quot;Seth Grayson&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Seth Grayson，他本来是Remy雇佣的间谍。但是本身能力非常强，见识到了Frank的政治能力之后毅然投向了Frank。&lt;/p&gt;

&lt;p&gt;他的职业是Frank的新闻发言官，但是后来Doug请他帮忙一起查找Frank的“盲点”的时候，Doug说，这要请你帮个忙，但是可不是发布新闻。&lt;/p&gt;

&lt;p&gt;Seth耸耸肩说，“新闻发布官只是一个头衔”。&lt;/p&gt;

&lt;p&gt;所以我觉得，专业主义者，总会很清楚，自己的职位和职业只是一个头衔，但自己的核心竞争力是自己提供的服务。自己能处理的就不用上升，需要上升的，就尽快上升。&lt;/p&gt;
</description>
				<pubDate>Thu, 20 Mar 2014 08:35:00 +0800</pubDate>
				<link>http://yuguo.us/weblog/house-of-cards/</link>
				<guid isPermaLink="true">http://yuguo.us/weblog/house-of-cards/</guid>
			</item>
		
			<item>
				<title>爱上北上广深</title>
				<description>&lt;p&gt;在QQ空间看到这样一段话：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;快毕业时，老师告诉我们，如果可以的话，毕业后还是留在家乡工作创业，非走不可也不要太远。不然，就算没日没夜终于拼到拿二三十万年薪，你会发现，留在家乡的同窗也已有房有车有体面工作，享受家乡低消费的乐趣，成天去婆婆或是丈母娘家蹭饭，没事跟亲妈撒娇，隔三差五跟各个时期的朋友同事喝个酒，真遇到个麻烦事整个家族拥上来一块解决，每天早晨一脚油门就蹬到单位，节假日去你喜欢的所谓大城市旅个游，旅行结束后躺在床上说句还是家里舒服。而与此同时，你正拿着二三十万的年薪给老板干着五十万的工作，你享受着高消费，你租房，你单身，你有事只能自己冲上去解决，你一年回家两到四次，每次为了待这几天要跟上万人抢票，然后匆匆忙忙大包小包地赶。你每次离开的时候，都会觉得父母又苍老了，算下来一年两到四次见面的话，应该还剩不足百次了。你想起了小时候，你想回家了，可，一切好像都有点晚了，回到家乡意味着放弃了那么多年的努力，意味一切又要回到了刚毕业那年，从零开始，所以你不敢，于是又预定了离开的票……
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在刚开始工作的时候，我也确实有过这样的困惑，钱确实比小城市赚的多一点，但是赚多少都不够花，工作一年几乎攒不到钱，那时候的心情是非常纠结的。&lt;/p&gt;

&lt;p&gt;我后来的女朋友也告诉我，她有过类似的孤独迷茫感受，要不是遇见我，她可能都没法在深圳继续过下去，准备回成都了。&lt;/p&gt;

&lt;p&gt;但是现在，她很庆幸当初留下了，也开始觉得深圳是比成都更好的城市。我的想法已经渐渐清晰起来。&lt;/p&gt;

&lt;p&gt;年轻人应该多挣钱，与此同时，除了稍微留一点去投资理财，其余的全花掉。&lt;/p&gt;

&lt;h2&gt;首先，为什么要多挣钱？&lt;/h2&gt;

&lt;p&gt;钱只是数字，它代表你提供的服务有多大的价值。在小城市赚的少，大城市赚得多，为什么？因为大城市的人提供的价值普遍大一些，他们在给社会做贡献。在小城市“有车有房有体面的工作”在我看来是在混日子，我这样说会显得有点刻薄，但大部分人就是如此。&lt;/p&gt;

&lt;p&gt;“遇到麻烦事整个家族一起解决”，因为小城市里生活，关系网重于能力，没有关系网几乎什么事情都办不下来。但是在深圳这样的城市，即使一个人，很多事情都好解决，政府也（相对）有效率。&lt;/p&gt;

&lt;p&gt;“有事情只能自己解决”这是专业主义的态度。整个社会每个人都专业地做好自己的事情，而不依赖跟其他人的关系，这才是正常的社会吧。&lt;/p&gt;

&lt;p&gt;“拿着二三十万的年薪给老板干着五十万的工作”这是很正常的，而且如果是上市公司，你给老板带来的价值应该要5倍以上你的工资才够格。我宁愿“拿着二三十万的年薪给老板干着五十万的工作”，也不愿“拿着五万的年薪给老板干三万的工作”。&lt;/p&gt;

&lt;h2&gt;为什么要多花钱？&lt;/h2&gt;

&lt;p&gt;过于节省的生活其实是对社会经济不利的，是经济凋敝的表现。大家都活跃地交换自己提供的服务，并享受其他人的服务，社会才会涌现更多高效的服务。&lt;/p&gt;

&lt;p&gt;所以我买扫地机器人，买两台MacBook，买机械键盘，电动牙刷……总之在一些个人消费上，不吝啬。&lt;/p&gt;

&lt;p&gt;最后，花的钱多了，也会更加努力地思考，如何让自己提供最大的价值，以获得对应的金钱认可。&lt;/p&gt;

&lt;p&gt;这一年来在深圳买车买房，越来越喜欢这个城市，我会在父母年老之前想办法再买一套房，接他们来深圳。&lt;/p&gt;

&lt;p&gt;最后，为什么往往能看到“逃离北上广深”的文章，看不到“爱上北上广深”的文章？因为离开的人（或者根本就没能力来的人）需要一些“理由”说服自己是明智的，而在北上广深认真生活的人，根本无需理由。&lt;/p&gt;
</description>
				<pubDate>Sat, 01 Mar 2014 10:35:00 +0800</pubDate>
				<link>http://yuguo.us/weblog/money-flow/</link>
				<guid isPermaLink="true">http://yuguo.us/weblog/money-flow/</guid>
			</item>
		
			<item>
				<title>卓有成效的管理者</title>
				<description>&lt;p&gt;最近在和菜头的公共账号里看到一篇文章《Netflix文化：自由与责任》，该文翻译自Netflix的PPT，阐述了明星IT公司Netflix的企业文化：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;用市场最高价格雇佣高效能人士组成团队。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;我的观点是，对于脑力劳动者的自我修养，这些看法值得我们学习，但是&lt;strong&gt;对于管理者，这一文化纯属心灵鸡精，并没有可操作性，高效能的管理者并不奢求完美的人才，他能让平凡的人成就不平凡的事业。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在德鲁克的经典管理书《卓有成效的管理者》里面，他建议管理者学会这么一种创建组织的方式：若某人在某一方面具有特长，就要让他充分发挥这一特长。而不应该期望另寻万能的天才来达成绩效。这本书堪称提高脑力劳动者专业度的圣经。&lt;/p&gt;

&lt;p&gt;值得在最开始就明确的是，本书的“管理者”的定义并不是以他有没有下属而定，而是看他是否能做决策，并承担起做贡献的责任。本书的英文名《The Effiective Executive》中Executive既有传统的“管理人员”的意思，又有只负责执行而不负责判断的“执行者”的意思。所以在本书和本文的语境下，请牢记这一点：管理者泛指工作者、经理人员和专业人员，由于其职位和知识，他们必须在工作中做出影响整体绩效和成果的决策。&lt;strong&gt;所以程序员也属于管理者。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其次我们要明确的是什么是“有效”，为什么“有效”很重要。在旧的社会中，在脑力劳动者没有占据社会这么大比例的时候，管理者的“有效”并不是一个很难评估的指标。因为在体力劳动的社会，无论是执行者还是小的领导（可以认为是监工），他们要做的事情是固定的、可衡量的，而最优秀的人和平均的人的产出差别也不会超过两倍，所以雇员是否有效是一目了然的事情。但是在现在，管理者是否“有效”是一个很难回答的问题。程序员的产出是代码，但实际上是他思维的表现，他坐在桌子前思考，没有人知道他在思考工作还是思考今天的晚餐。而高效能的管理者的成果能比一般管理者高出十倍以上！所以现在一个管理者是否有效是一个非常重要的问题。&lt;/p&gt;

&lt;p&gt;有天生的管理者吗？我在上学的时候觉得自己这辈子应该做不了管理类的工作，因为我不是对人会很热情很自来熟的类型。我没有办法很快记住一个人的名字，也有点脸盲，在团队中也不是会说很多话的人。我喜欢专注做事情，我以为我会一辈子搞技术。&lt;/p&gt;

&lt;p&gt;但是管理者的有效性不是天生的。假如卓有成效是一种天赋，那就糟糕了，今天的大型组织的文明，所依赖的是大批具有一定有效性而且可以担任管理者的人。事实上，卓有成效的管理者并无性格上的共性，唯一的共性就是他们要经过长期的训练，从而养成五个思维上的习惯。&lt;/p&gt;

&lt;p&gt;这五个思维习惯是本书的核心，环环相扣，非常经典。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;有效的管理者知道他们的时间用在什么地方。&lt;/li&gt;
&lt;li&gt;有效的管理者重视对外界的贡献。&lt;/li&gt;
&lt;li&gt;有效的管理者善于利用长处，包括自己的长处、上司的长处、同事的长处和下属的长处。&lt;/li&gt;
&lt;li&gt;有效的管理者集中精力于少数重要的领域，在这少数重要的领域中，如果能有优秀的绩效就可以产生卓越的成果。&lt;/li&gt;
&lt;li&gt;最后，有效的管理者必须善于做有效的决策。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;每一条都会花一章的时间来展开说明，每一章都有些让我醍醐灌顶的部分。比如“有效的管理者重视对外的贡献”：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;重视贡献，才能使管理者的注意力不为其本身的专长所限，不为其本身的技术所限，不为其本身所属的部门所限，才能看到整体的绩效，同时也才能使他更重视外部世界。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;你们感受一下。&lt;/p&gt;
</description>
				<pubDate>Sat, 22 Feb 2014 10:35:00 +0800</pubDate>
				<link>http://yuguo.us/weblog/the-effective-executive/</link>
				<guid isPermaLink="true">http://yuguo.us/weblog/the-effective-executive/</guid>
			</item>
		
			<item>
				<title>有兴趣就够了吗？</title>
				<description>&lt;p&gt;2012年我组织ISUX设计团队十来个人一起翻译了一本&lt;a href=&quot;http://yuguo.us/weblog/isux-and-smashing-book/&quot;&gt;《Smashing Book
3》&lt;/a&gt;，后来我在腾讯大厦食堂上面一块简陋的幕布上分享图书出版背后的一些幕后故事的时候，两个毕业生小伙子联系到我，说他们很有兴趣翻译英文书，如果有机会就给他们关照一下。&lt;/p&gt;

&lt;p&gt;我刚经历翻译一本书搞的每天睡眠不足的阶段，所以非常清楚翻译是很耗费时间和脑力的工作，阮一峰曾经翻译完《More Joel on Software》之后说到：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;  话说今年8月份，我翻译完More Joel on
  Software，已经精疲力竭，对这种通过长时间击键，将英语改写为汉语的廉价体力+脑力劳动深恶痛绝，再也不想干了。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;对，当时的我就是抱着再也不想干了的想法跟他们说，如果出版社有更多的需求，而你们有时间和兴趣的话，我就把任务转给你们。&lt;strong&gt;但我是没有时间涉及到里面去了&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;后来出版社跟我说，有一本响应式设计流程的书。我觉得这个题材还不错，就转给这两个年轻人去翻译。他们评估之后觉得两个月应该能完成，我答应到时候帮他们校对一下。&lt;/p&gt;

&lt;p&gt;但是结果他们出于各种各样的理由（搬家啦，参加其他活动啦，加班啦）延期交稿。延期了也不主动告知我原因，所有的沟通都是我主动去问，然后才告诉我延期了，保证下个星期交道，催了好几次确一拖再拖，耗费4个月的时间也没能完成各自预期的50%的工作量。我只好拉了其他人来帮忙剩下的部分。&lt;/p&gt;

&lt;p&gt;而他们完成的那60%也只能算勉强及格，错译、漏译的情况常常出现，可能是能力问题吧，但给我的感觉却是根本就不上心的缘故。&lt;/p&gt;

&lt;p&gt;直到现在，我还在收拾这个烂摊子，虽然这个项目本不该由我来主导，但既然我知道最终印出的书上会写上我的名字，我就有责任投入时间去做好它。&lt;/p&gt;

&lt;p&gt;最后，我给所有&lt;strong&gt;刚开始工作的年轻人&lt;/strong&gt;的建议：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;老板给你任务，根本不关心你有什么理由，只关心你完成没有。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;扯一些理由（特别是私人的理由）根本就是不专业的态度。不要说自己没能完成的事情是由于什么原因导致的，而要以诚恳的态度说明当前进度，以及未来是否能如期完成目标，如果不能，就直接说出来。这样老板可以对进度有所了解和预期。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在职场中，我们评估一个人并不是根据他的能力，而是他的责任。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果一个项目成功或者失败，准时完成或者延误，都有一个人能主动汇报和负责，拍着胸脯说“我负责”。那他就应该是项目主导和骨干，而不论年龄和资历。&lt;/p&gt;

&lt;p&gt;而我们最终评估一个人是否应该升职加薪，不是看他的能力，也不是看他投入的时间，更不是看兴趣，只是看他的责任。他在一个个项目中都承担起了责任，就是一个有责任心的人，就能更加委以重任。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在能力不足的时候，唯有投入大量的时间。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;新人没经验，知识不丰富可以理解，但是以此为理由输出不合格的产品，那就是自己的问题。我在实习的时候，通宵睡在公司都经历过。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;你有没有想着把你的产品和你的名字联系起来？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有些成功的作品，项目，我们都希望把自己的名字同它联系起来，让人们谈到这个项目的时候，也能为自己增光添彩。但是在这个项目还在孵化中的时候，你是否有把自己的名字跟项目联系起来的觉悟？&lt;/p&gt;

&lt;p&gt;保证质量并不是其它人的责任，不是你的reviewer的责任，不是测试的责任，就是你的责任。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;你是否珍惜你的时间？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其实中国的教育很缺乏对时间管理的教育，十几年的学生生涯中，该干什么是很固定的，任务持续的时间也是老师安排的。而在踏入工作之后，任务一下子变得不是很明确，时间也没有那么固定。&lt;/p&gt;

&lt;p&gt;我有接近4年的工作经验（包括实习），在这过程中从纯粹的干活，到现在慢慢投入越来越多的时间在团队管理上，我有一些经验之谈。&lt;/p&gt;

&lt;p&gt;有些人觉得刚毕业确实是比较忙的，因为活儿都丢给毕业生去干，等渐渐当上管理层，就闲散了，因为可以把活儿丢给别人干了嘛！事实是截然相反的，管理者要做的事情比执行者更多，但是因为管理者能管理好自己的时间，做事讲究优先级，懂得授权和请求他人帮助，所以能避免“瞎忙”。&lt;/p&gt;

&lt;p&gt;所以在工作中，珍惜自己的时间尤为重要。这里推荐《卓有成效的管理者》给所有从事脑力劳动的年轻人，书中会写到管理者第一个需要练习的就是管理时间。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;自己的责任&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在这个项目中，我也有自己的责任。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;没有在最开始做出合理的时间评估&lt;/li&gt;
&lt;li&gt;没有根据人员的强项来安排任务&lt;/li&gt;
&lt;li&gt;没有充分沟通&lt;/li&gt;
&lt;li&gt;自己虽然有责任感，但只是“消极”的责任感，不要把事情弄砸，而不是“积极”想做这个项目的主动精神&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;在组织中工作，并不是特别需要很强的个人能力或者天赋，但是要稳扎稳打，虚心学习，不要玻璃心，真诚沟通，珍惜每一次输出的机会。&lt;/p&gt;

&lt;p&gt;共勉。&lt;/p&gt;
</description>
				<pubDate>Thu, 13 Feb 2014 20:35:00 +0800</pubDate>
				<link>http://yuguo.us/weblog/interest-is-not-good-enough/</link>
				<guid isPermaLink="true">http://yuguo.us/weblog/interest-is-not-good-enough/</guid>
			</item>
		
			<item>
				<title>《编剧的艺术》</title>
				<description>&lt;p&gt;最近读了一本编剧入门的经典教材《编剧的艺术》，这本书非常好，让我对创作有了新的认识。&lt;/p&gt;

&lt;p&gt;任何书，任何戏剧，任何ppt，任何文章……人类创造的任何优秀的作品，都有一个共同点：“一个明确的前提”。&lt;/p&gt;

&lt;p&gt;小时候我们语文课作业经常是“概括本文中心思想”，这给我们一个错觉：中心思想是事后提炼出来的。&lt;/p&gt;

&lt;p&gt;其实不然，中心思想也就是《编剧的艺术》一书中所定义的“前提”，是在创立之初就必须明确的。&lt;/p&gt;

&lt;p&gt;创作者必须确定一个清晰明确的前提，可以是一句简单的话。比如《罗密欧与茱丽叶》的前提是“伟大的爱情战胜一切”。然后在整个作品的创建中时刻坚守这一前提，任何人物和情节都必须服务这一前提，如果想到一个特别有趣的情节，但是跟前提没有关系，就必须放弃掉。&lt;/p&gt;

&lt;p&gt;整个作品中的一切都要服务于前提。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;法国著名雕塑家罗丹，精心雕塑了一座文学家巴尔扎克的像：巴尔扎克目光炯炯，身披宽袖长袍，一双手非常自然地叠合在胸前。罗丹唤来了自己的三个学生来欣赏他的得意之作。不料，三个学生不约而同地被雕像上这双栩栩如生的手吸引住了，连声赞叹：“好极了，这真是一双奇妙的手啊！”罗丹从学生的表情中感到这双手虽然塑得绝妙，可是作为整体的一部分，太突出了，起了喧宾夺主的作用，因此，他找来了一把大斧，劈里啪地把这双手砍掉了。几个学生被罗丹的举动吓得目瞪口呆。&lt;/p&gt;

&lt;p&gt;因为这个作品主要是表现和展示巴尔扎克的为人气质和精神特征，而不是表现这只手的，这只手虽然精美，但却冲淡了作品的主题，显然是多余的，应毫不犹豫地砍掉。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;《编剧的艺术》这本书被称为戏剧编剧的经典教材，但我推荐给所有人阅读。从这本书里我学到很多创作的技巧，也能在看电影的时候分辨出那些空有漂亮的主演和华丽的情节，而根本没有明确的前提的烂片。&lt;/p&gt;

&lt;p&gt;最后，所有好的书都可以用一句话来总结，但并不意味着只读这一句话就能有所收获，必须亲身去提炼，把书读厚，再把书读薄。&lt;/p&gt;

&lt;p&gt;《编剧的艺术》这本书的前提是“可以通过明确的前提、丰满的人物和升级的冲突来创造出引人入胜的剧本”。&lt;/p&gt;

&lt;p&gt;这一前提并不仅能用在戏剧创作，在创造ppt的时候也可以使用这一前提，首先确定整个ppt的前提，然后每一页都服务于这一前提。&lt;/p&gt;

&lt;p&gt;最后做一下广告，我在豆瓣新开了一个专栏&lt;a href=&quot;http://read.douban.com/column/226077/&quot;&gt;《谈谈全栈工程师》&lt;/a&gt;，会每周发表一些关于“全栈工程师（full-stack developer）”的话题，欢迎订阅。但是现在还没有正式发布的功能，我写的文章只能囤积在后台，订阅之后如果哪天能正式更新了就会在你的豆瓣帐号收到推送。&lt;/p&gt;
</description>
				<pubDate>Mon, 27 Jan 2014 16:35:00 +0800</pubDate>
				<link>http://yuguo.us/weblog/art-of-dramatic-writing/</link>
				<guid isPermaLink="true">http://yuguo.us/weblog/art-of-dramatic-writing/</guid>
			</item>
		
			<item>
				<title>2013年终总结</title>
				<description>&lt;p&gt;2013年就要过去了，像往年一样总结一下过去的一年我的变化。&lt;/p&gt;

&lt;h1&gt;生活&lt;/h1&gt;

&lt;p&gt;在深圳买房了。其实这个决定做的挺突然（因为前房东不续租了），但是快速买了房并入住之后一直都是很庆幸当时下决心很快。因为6月份以后直到现在深圳的房价仍然在一路上涨，前海片区涨了20%以上，如果当时没买现在肯定更加买不到了。而且十月份后全国性的贷款收紧，这时候已经很难贷到房贷，或者很难以折扣贷到款。第三是因为这半年忙活一些软装修，包括去乐安居挑吊顶和窗帘，去宜家买摇椅，配置地毯，自己拿电钻装饰厨房，这里面有很多乐趣。最后感谢腾讯，提供部分无息贷款，福利很好，想跳槽的前端欢迎联系我：）&lt;/p&gt;

&lt;p&gt;我在今年底买了人生第一辆车，去年报的驾校也在今年年底顺利毕业，拿到了驾照。买车这个决定也做的很快，但是买了还是觉得挺值，因为有了一种“蒙多想去哪儿就去哪儿”的感觉，有关闭车窗那种与世隔绝的安静，有下雨天打在天窗玻璃上的积水，还有冬天从空调口输出的暖气，还可以在等人的时候打开天窗看书。总结来说就是安全和自由的心理感受。&lt;/p&gt;

&lt;p&gt;还买了一些对生活品质有所提高的东西。在新家厨房配置了直饮净水系统，净水的程度比桶装纯净水还要干净。买了roomba扫地机器人，节省了很多扫地的时间，而且把一些毛发，和地毯绒毛也全部吸进去，效果很好。retina MBP，超快的ssd和retina屏幕，这个体验过就回不去了。买了kpw2，比前两个kindle都好，更轻量便携，更高的dpi，还有背光灯，一样的续航能力，日本价格700+，非常超值。对我来说，物件的价值并不是一个简单的price tag，而是买回来之后自己会用多少次，每次使用给自己带来的效用值多少钱。所以一个iPhone比起android并不会贵，因为能用更久，而且可以以相对不错的价格回收。&lt;/p&gt;

&lt;p&gt;今年夏天休假去马来西亚的沙巴海滩潜水，只是最初级的浮潜，但已经能看到很美的水下景色，下定决心以后要去仙本那潜水胜地玩一玩~&lt;/p&gt;

&lt;h1&gt;工作&lt;/h1&gt;

&lt;p&gt;年初在App Store上线了一个自己的iOS App，自己不是很满意，但也确实学习到一些经验。后续忙别的工作，就没有继续做更多App了。&lt;/p&gt;

&lt;p&gt;在公司，我今年成功晋级T3高级设计师，算是一个期待了挺久，最终也顺利达成的目标。从进入腾讯到现在一共三年，每半年一次升级，都没有拉下，比较顺利，这过程中也要感谢周围的同事和领导。&lt;/p&gt;

&lt;p&gt;今年我做了大小几十次演讲，两次公司级的演讲，两次部门级的和两次跨部门的分享。其实演讲也是一种需要大量练习才能习得的技能，我现在也只是做到了最基础：弄清楚目标听众是什么，吸引他们的注意，表达我的想法。最近看了很多罗胖的罗辑思维，整体的表达非常好，我自愧太不如，以后要在这一块多加练习。&lt;/p&gt;

&lt;p&gt;今年我组织翻译和校对的书《众妙之门3》顺利出版，其实是去年一直在做的努力，在今年4月份终于有了圆满的结果。这个要感谢人民邮电出版社的编辑赵轩，感谢ISUX的小伙伴们~&lt;/p&gt;

&lt;p&gt;技术学习方面，粗而广地学了一些东西，nodejs、mongodb、objective-c、Angularjs、响应式流程等。我学技术的原则是熟练度可以不高，但原理和模式一定要理解。&lt;/p&gt;

&lt;p&gt;读书方面，今年读了很多老书，开始书架重读计划，我觉得读书不能贪多和贪数字。&lt;/p&gt;

&lt;p&gt;最后的最后，跟melody恋爱三年了，以前坐在我的自行车横杆，现在坐在我的副驾，我想，以后无论发生什么，我们也能一路走下去吧。&lt;/p&gt;
</description>
				<pubDate>Mon, 23 Dec 2013 09:35:00 +0800</pubDate>
				<link>http://yuguo.us/weblog/2013-year/</link>
				<guid isPermaLink="true">http://yuguo.us/weblog/2013-year/</guid>
			</item>
		
			<item>
				<title>激励与响应</title>
				<description>&lt;p&gt;2013年12月15日，天津市政府召开新闻发布会，宣布实行小客车总量调控管理以及实施机动车限行交通管理措施，也就是“限购＋限行”。&lt;a href=&quot;http://news.xinhuanet.com/fortune/2013-12/16/c_125863248.htm&quot;&gt;原文&lt;/a&gt; 。管理措施12月16日凌晨生效。&lt;/p&gt;

&lt;p&gt;当晚天津市民排队抢购小汽车，4S店和二手车交易市场通宵营业，新车和二手车都需要加价购买。&lt;/p&gt;

&lt;p&gt;因为鼠患严重，河内的法国殖民政府曾经颁布过一条法令：人们每交出一只死老鼠，政府就给他发钱。这导致一些民众饲养老鼠，以此赚钱。&lt;/p&gt;

&lt;p&gt;因为法国皇帝希望用一种简单方便的办法征收房产税，提出了“窗户税”：即根据每一户的窗户数量来征收税收，这导致（经过近百年的变迁）法国一些房子不再建造窗户，终年潮湿阴暗。&lt;/p&gt;

&lt;p&gt;公司对部门的考核是“收入”，那么部门的BD对完谈合作的时候就会说我用平台和渠道免费营销你的产品，但是只有当你的销量达到500万的时候才免费。所以先收100万的现金，到时候再返还给商户。&lt;/p&gt;

&lt;p&gt;这样做，BD也也等于让步得到了谈判的资本，自己的KPI也达到了，但实际上股东利益并没有得到保证。&lt;/p&gt;

&lt;p&gt;简单的说，第一，一旦有激励加入游戏或者改变了激励，人们就会迅速而激烈地改变自己的行为；第二，人们是对激励做出反应，而不是对激励背后的目的做出反应。&lt;/p&gt;

&lt;p&gt;如果你对某个人或某个组织的行为感到吃惊，那后面90%隐藏着什么激励机制。&lt;/p&gt;
</description>
				<pubDate>Mon, 16 Dec 2013 09:35:00 +0800</pubDate>
				<link>http://yuguo.us/weblog/motivate-and-response/</link>
				<guid isPermaLink="true">http://yuguo.us/weblog/motivate-and-response/</guid>
			</item>
		
			<item>
				<title>Bigpipe用Nodejs的实现</title>
				<description>&lt;p&gt;&lt;section&gt;&lt;/p&gt;

&lt;h1&gt;Bigpipe用Nodejs的实现&lt;/h1&gt;


&lt;p&gt;&lt;a href=&quot;http://yuguo.us/weblog/bigpipe-in-nodejs&quot;&gt;http://yuguo.us/weblog/bigpipe-in-nodejs/&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;
&lt;small&gt;Created by &lt;a href=&quot;http://yuguo.us&quot;&gt;Yuguo&lt;/a&gt;&lt;/small&gt;
&lt;/p&gt;


&lt;p&gt;&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;Source &amp;amp; Thanks&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/undoZen&quot;&gt;https://github.com/undoZen&lt;/a&gt;
&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;什么是Bigpipe&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;是一种不局限于语言的前后端整合技术方案&lt;/li&gt;
&lt;li&gt;由Facebook首创&lt;/li&gt;
&lt;li&gt;适合比较大型的，需要大量服务器运算的站点&lt;/li&gt;
&lt;li&gt;有效减少HTTP请求&lt;/li&gt;
&lt;li&gt;兼容多浏览器
&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;Bigpipe解决的问题&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;下载阻塞&lt;/li&gt;
&lt;li&gt;服务器与浏览器算力浪费
&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;现有的阻塞模型&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/files/2013/12/traditional-network.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;页面解析步骤&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;浏览器发送HTTP请求&lt;/li&gt;
&lt;li&gt;服务器接收到HTTP请求，解析请求，从存储层拉取数据，拼接HTML，发回一个HTTP响应&lt;/li&gt;
&lt;li&gt;这个请求通过网络传输到浏览器&lt;/li&gt;
&lt;li&gt;浏览器解析接收到的数据，构造DOM树，下载CSS和JavaScript&lt;/li&gt;
&lt;li&gt;浏览器下载了CSS之后，开始解析CSS，渲染页面&lt;/li&gt;
&lt;li&gt;下载JavaScript之后，开始解析JavaScript，执行JavaScript
&lt;/section&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;传统流程&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;整个完整的页面&lt;/strong&gt;渲染依次经过以下步骤。
&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;Bigpipe解析步骤&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;每一个Pagelet&lt;/strong&gt;都经过以下每一个步骤才会出现在浏览器中，但是多个Pagelet可以同步进行处理。
&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;Bigpipe的速度提升&lt;/h2&gt;

&lt;p&gt;Facebook的Pagelet&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/2013/12/facebook.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;Bigpipe的速度提升&lt;/h2&gt;

&lt;p&gt;Facebook的Pagelet&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/2013/12/facebook-page-parts.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;Bigpipe的速度提升&lt;/h2&gt;

&lt;p&gt;页面分片越多，性能提升越明显&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/2013/12/facebook-bigpipe.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;Bigpipe不适合&lt;/h2&gt;

&lt;p&gt;简单页面，适合服务器直出全部HTML
&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;YSlow优化建议&lt;/h2&gt;

&lt;p&gt;提早flush
&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;flush()&lt;/h2&gt;

&lt;p&gt;PHP中的&lt;code&gt;flush()&lt;/code&gt;函数可以建立一个HTTP持久链接，达到分块传输的效果，YSlow建议在输出&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;之后马上&lt;code&gt;flush()&lt;/code&gt;，以便浏览器下载资源。
&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h1&gt;Nodejs实现Bigpipe的DEMO&lt;/h1&gt;

&lt;p&gt;&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;Nodejs是什么&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;一个JavaScript运行环境&lt;/li&gt;
&lt;/ul&gt;


&lt;hr /&gt;

&lt;h2&gt;Nodejs不是什么&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;不是一个库
&lt;/section&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;Bigpipe in Nodejs&lt;/h2&gt;

&lt;p&gt;是一种技术方案（Bigpipe）在一种环境（Nodejs）中的实现。&lt;/p&gt;

&lt;p&gt;&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;p&gt;Bigpipe的服务器端可以用各种语言来实现&lt;/p&gt;

&lt;h2&gt;为什么使用Nodejs？&lt;/h2&gt;

&lt;p&gt;&lt;small&gt;注：Bigpipe技术的服务器端需要HTTP1.1支持，浏览器端需要JavaScript支持。&lt;/small&gt;
&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;Why Nodejs?&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;异步特性适合Web，适合用少量服务器服务海量用户&lt;/li&gt;
&lt;li&gt;同一种语言模板同时运行在服务器和浏览器中&lt;/li&gt;
&lt;li&gt;开源社区支持
&lt;/section&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;关键技术点&lt;/h2&gt;

&lt;p&gt;HTTP 1.1引入分块传输编码&lt;/p&gt;

&lt;p&gt;&lt;small&gt;注：HTTP分块传输编码允许服务器为动态生成的内容维持HTTP持久链接。&lt;/small&gt;
&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;HTTP分块传输编码格式&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Transfer-Encoding: chunked
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果一个HTTP消息（请求消息或应答消息）的Transfer-Encoding消息头的值为chunked，那么，消息体由数量未定的块组成，并以最后一个大小为0的块为结束。
&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;Nodejs自动开启 chunked encoding&lt;/h2&gt;

&lt;p&gt;除非通过sendHeader()设置Content-Length头。
&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;Nodejs Express&lt;/h2&gt;

&lt;p&gt;使用Express简单架设一个web服务器（简化原生Nodejs http api），并使用jade来渲染页面模板（让代码简单）。
&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;res.render&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;res.render(&#39;view&#39;, option);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只有两个参数时，&lt;code&gt;res.render()&lt;/code&gt;自动调用&lt;code&gt;res.send()&lt;/code&gt;，res.send包括&lt;code&gt;res.end()&lt;/code&gt;
&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;res.render设置第三个参数&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;res.render(&#39;view&#39;, option, function(err, html){
    res.write(html);
    res.end();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设置了第三个参数时，不会自动&lt;code&gt;res.end()&lt;/code&gt;，Good！
&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;发送多个pagelet&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;res.render(view, options, function (err, str) {
    if (err) return res.req.next(err)
    res.setHeader(&#39;content-type&#39;, &#39;text/html; charset=utf-8&#39;)
    res.write(str)
    if (!res.pipeCount) res.end()
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要发送n个pagelet，就可以在每渲染一个pagelet之后计数-1，当全部渲染完成之后才调用&lt;code&gt;res.end()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;layout.jade&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;doctype html

head
  title Hello, World!
  link(href=&quot;/static/style.css&quot;, rel=&quot;stylesheet&quot;)
  script(src=&quot;/static/jquery.js&quot;)
  script(src=&quot;/static/jade.js&quot;)

section#s1!=s1
section#s2!=s2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;第一部分数据&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Hello, World!&amp;lt;/title&amp;gt;
&amp;lt;link href=&quot;/static/style.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&amp;lt;script src=&quot;/static/jquery.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;/static/jade.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;section id=&quot;s1&quot;&amp;gt;
&amp;lt;span id=&quot;pipe_08554240758530796_1386255294914&quot;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/section&amp;gt;
&amp;lt;section id=&quot;s2&quot;&amp;gt;
&amp;lt;span id=&quot;pipe_020325828110799193_1386255294914&quot;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;第二部分数据&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
$(&quot;#pipe_08554240758530796_1386255294914&quot;)
.replaceWith(&quot;&amp;lt;h1&amp;gt;Partial 1&amp;lt;/h1&amp;gt;&amp;lt;div class=\&quot;content\&quot;&amp;gt;&quot;+
+&quot;Hello, I&#39;m the first section.&amp;lt;/div&amp;gt;&quot;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;第三部分数据&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
$(&quot;#pipe_020325828110799193_1386255294914&quot;)
.replaceWith(&quot;&amp;lt;h1&amp;gt;Partial 2&amp;lt;/h1&amp;gt;&amp;lt;div class=\&quot;content\&quot;&amp;gt;&quot;
+&quot;Hello, I&#39;m the second section. Takes 5 seconds to render.&amp;lt;/div&amp;gt;&quot;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;第四部分数据&lt;/h2&gt;

&lt;p&gt;空数据（END）
&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;更复杂的实现&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
big_pipe.onPageletArrive(
{id:&quot;pagelet_composer&quot;,
content:&quot;&amp;lt;HTML&amp;gt;&quot;,
css:&quot;[..]&quot;,
js:&quot;[..]&quot;,
…}
);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h1&gt;Thank You!&lt;/h1&gt;

&lt;p&gt;&lt;small&gt;Created by &lt;a href=&quot;http://yuguo.us&quot;&gt;Yuguo&lt;/a&gt;&lt;/small&gt;
&lt;/section&gt;&lt;/p&gt;

&lt;p&gt;&lt;section data-markdown&gt;&lt;/p&gt;

&lt;h2&gt;课后问答&lt;/h2&gt;

&lt;p&gt;Bigpipe对SEO的影响是什么？如何解决？
&lt;/section&gt;&lt;/p&gt;
</description>
				<pubDate>Fri, 06 Dec 2013 09:35:00 +0800</pubDate>
				<link>http://yuguo.us/weblog/bigpipe-in-nodejs/</link>
				<guid isPermaLink="true">http://yuguo.us/weblog/bigpipe-in-nodejs/</guid>
			</item>
		
			<item>
				<title>前端工业化3：VCS</title>
				<description>&lt;p&gt;任何慎重地对待编程的程序员和团队都会使用VCS（主要是Git或者SVN），主要有这样几个作用：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对于程序员个人，记录代码避免丢失，方便查看修改并回溯，分支同一个代码仓库中的不同需求，记录小型里程碑&lt;/li&gt;
&lt;li&gt;对于团队协作来说，VCS的自动合并能省去我们95%的合并代码工作量&lt;/li&gt;
&lt;li&gt;对于代码审查者来说，方便监视主干代码的修改，并接受或者拒绝提交的代码&lt;/li&gt;
&lt;li&gt;通过使用一些行为钩子，可以在VCS行为之前或者之后自动触发其它事件&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;我在加入ISUX团队之前是一个菜鸟学生，从来没有使用过VCS，对于当时的我来说，SVN就只有一个作用：&lt;strong&gt;合并代码到主干&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;所以当时的我既累又容易出错，因为我使用SVN的方法完全错误：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在trunk上直接开发&lt;/li&gt;
&lt;li&gt;完成一个完整的需求才commit一次&lt;/li&gt;
&lt;li&gt;只commit这个需求需要的文件和代码，人工检查&lt;/li&gt;
&lt;li&gt;代码库中残留越来越多没有提交的脏代码&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;我没有利用到SVN的其它功能：频繁记录代码里程碑，多个分支切换，让这些外部信息从大脑里释放，保持代码库的干净。但是随着我需要接入的项目越来越多，越来越需要快速在多个项目切换，并且也开始使用其它VCS（Git），我开始对VCS有了更好的理解。&lt;strong&gt;VCS并不只是帮助代码合并的团队工具，也是个人管理代码的很好方式。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我现在非常喜欢使用Git管理版本，因为它跟SVN有一个完全不同的地方是它是分布式的，完整的代码库存在在每一台部署了代码库的机器上，我在本地切换分支，新建分支非常快，秒级生效，而且无需网络就可以commit代码。最后，世界上最好的开源代码社区是使用Git搭建（Github），你还有什么理由不使用Git呢？&lt;/p&gt;

&lt;p&gt;关于各种VCS的用法和实践，其实我不用在本文一一说明，因为资料已经太多。推荐阅读：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;&amp;lt;http://www.ruanyifeng.com/blog/2012/07/git.html&gt;&quot;&gt;Git分支管理策略&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&amp;lt;http://www.tigris.org/scdocs/SVNTips.html.zh-cn&gt;&quot;&gt;SVN最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&amp;lt;http://ihower.tw/blog/archives/5140&gt;&quot;&gt;Git flow开发流程&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
				<pubDate>Tue, 26 Nov 2013 01:00:00 +0800</pubDate>
				<link>http://yuguo.us/weblog/front-end-industrialize-vcs/</link>
				<guid isPermaLink="true">http://yuguo.us/weblog/front-end-industrialize-vcs/</guid>
			</item>
		
	</channel>
</rss>